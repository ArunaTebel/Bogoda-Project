
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Iddamalgoda
 */
public class ACC_Edit_journals1 extends javax.swing.JFrame {

    public ACC_Edit_journals1() {
        initComponents();
    }

    Journals_account jaobject = new Journals_account();

    MessageBox msg = new MessageBox();

    DateChooser_text datechooser = new DateChooser_text();

    Date_Handler datehandler = new Date_Handler();

    Interface_Events interface_events = new Interface_Events();

    DatabaseManager dbm = DatabaseManager.getDbCon();

    int tr_no = 0;

    int countd = 0;
    int countc = 0;

    int c_acc_id[];
    double c_acc_amts[];

    int d_acc_id[];
    double d_acc_amts[];

    public void Set_Tr_No(int tr_no) {
        this.tr_no = tr_no;
    }

    public int stringToIntNum(String s) {
        if (s.length() == 0) {
            return 0;
        } else {
            return Integer.parseInt(s);
        }
    }

    public double stringToDoubleNum(String s) {
        if (s.length() == 0) {
            return 0;
        } else {
            return Double.parseDouble(s);
        }
    }

    public void foucs() {
        this.requestFocus();
        save.setEnabled(false);
        ref_no.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pay_type = new javax.swing.JComboBox();
        ref_no = new javax.swing.JTextField();
        journal_no = new javax.swing.JTextField();
        datepanel = new javax.swing.JPanel();
        monthfield = new javax.swing.JTextField();
        yearfield = new javax.swing.JTextField();
        dayfield = new javax.swing.JTextField();
        datePicker1 = new com.michaelbaranov.microba.calendar.DatePicker();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        credit_account_code_table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        credit_description_table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        credit_amount_table = new javax.swing.JTable();
        credit_account_code = new javax.swing.JComboBox();
        credit_description = new javax.swing.JTextField();
        credit_amount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        credit_total = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        credit_account_name = new javax.swing.JLabel();
        send2 = new javax.swing.JButton();
        Cheque_pay = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        chequeNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        bank_name = new javax.swing.JLabel();
        branch_name = new javax.swing.JLabel();
        bank_code = new javax.swing.JComboBox();
        branch_code = new javax.swing.JComboBox();
        chequeDate = new com.michaelbaranov.microba.calendar.DatePicker();
        jSeparator2 = new javax.swing.JSeparator();
        difference = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        save = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        debit_account_code_table = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        debit_amount_table = new javax.swing.JTable();
        debit_account_code = new javax.swing.JComboBox();
        debit_description = new javax.swing.JTextField();
        debit_amount = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        debit_total = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        debit_account_name = new javax.swing.JLabel();
        send = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        debit_description_table = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Reference No:");

        jLabel2.setText("Date");

        jLabel3.setText("Journal No:");

        jLabel4.setText("Pay Type");

        pay_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Cheque" }));
        pay_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pay_typeItemStateChanged(evt);
            }
        });
        pay_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pay_typeActionPerformed(evt);
            }
        });
        pay_type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pay_typeKeyPressed(evt);
            }
        });

        ref_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ref_noKeyPressed(evt);
            }
        });

        journal_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                journal_noKeyPressed(evt);
            }
        });

        datepanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        monthfield.setText(datehandler.get_today_month());
        monthfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                monthfieldKeyPressed(evt);
            }
        });

        yearfield.setText(datehandler.get_today_year());
        yearfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yearfieldKeyPressed(evt);
            }
        });

        dayfield.setText(""+Integer.parseInt(datehandler.get_today_day()));
        dayfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dayfieldKeyPressed(evt);
            }
        });

        datePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePicker1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datepanelLayout = new javax.swing.GroupLayout(datepanel);
        datepanel.setLayout(datepanelLayout);
        datepanelLayout.setHorizontalGroup(
            datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dayfield, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(monthfield, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        datepanelLayout.setVerticalGroup(
            datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datepanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dayfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(journal_no, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ref_no, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(pay_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(ref_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(datepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(pay_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(journal_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 0), 2, true), "CREDIT"));

        credit_account_code_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Account Code"
            }
        ));
        credit_account_code_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(credit_account_code_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        credit_description_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Discription"
            }
        ));
        credit_description_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(credit_description_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        credit_amount_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Amount"
            }
        ));
        credit_amount_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(credit_amount_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        credit_account_code.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        credit_account_code.setEditable(true);
        credit_account_code.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("account_names","account_id")));
        credit_account_code.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                credit_account_codeItemStateChanged(evt);
            }
        });

        credit_description.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                credit_descriptionKeyPressed(evt);
            }
        });

        credit_amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                credit_amountKeyPressed(evt);
            }
        });

        jButton1.setText("Clear all");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear Last ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        credit_total.setBackground(new java.awt.Color(204, 255, 204));

        jLabel14.setText("Total");

        credit_account_name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        credit_account_name.setForeground(new java.awt.Color(153, 153, 153));
        credit_account_name.setText("Account name here");

        send2.setText("Send");
        send2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send2ActionPerformed(evt);
            }
        });
        send2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                send2FocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(credit_account_code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(credit_total, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(credit_description, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(credit_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(credit_account_name, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(send2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(63, 63, 63))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(credit_account_code, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(credit_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(credit_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credit_account_name)
                    .addComponent(send2))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(credit_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14))
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(4, 4, 4))
        );

        jLabel8.setText("Branch");

        jLabel7.setText("Bank");

        jButton3.setText("View Codes");

        jButton4.setText("View Codes");

        jLabel9.setText("Cheque No:");

        chequeNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chequeNoKeyPressed(evt);
            }
        });

        jLabel5.setText("Date");

        bank_code.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        bank_code.setEditable(true);
        bank_code.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("bank","bank_id")));
        bank_code.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bank_codeItemStateChanged(evt);
            }
        });
        bank_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bank_codeActionPerformed(evt);
            }
        });

        branch_code.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        branch_code.setEditable(true);
        branch_code.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("bank_branch","branch_id")));
        branch_code.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                branch_codeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout Cheque_payLayout = new javax.swing.GroupLayout(Cheque_pay);
        Cheque_pay.setLayout(Cheque_payLayout);
        Cheque_payLayout.setHorizontalGroup(
            Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Cheque_payLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Cheque_payLayout.createSequentialGroup()
                        .addGap(0, 30, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(30, 30, 30)
                        .addComponent(chequeNo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Cheque_payLayout.createSequentialGroup()
                        .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Cheque_payLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(branch_code, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bank_code, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bank_name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(branch_name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16)
                .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addGroup(Cheque_payLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Cheque_payLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel7)
                    .addContainerGap(403, Short.MAX_VALUE)))
        );
        Cheque_payLayout.setVerticalGroup(
            Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Cheque_payLayout.createSequentialGroup()
                .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bank_name, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(bank_code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(branch_name, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(branch_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(chequeNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(chequeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(Cheque_payLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Cheque_payLayout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jLabel7)
                    .addContainerGap(65, Short.MAX_VALUE)))
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        difference.setBackground(new java.awt.Color(255, 204, 204));

        jLabel13.setText("Difference");

        jPanel4.setBackground(new java.awt.Color(204, 0, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));

        save.setText("Edit");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        save.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                saveFocusGained(evt);
            }
        });

        jButton7.setText("Cancel");

        jButton8.setText("Quit");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "DEBIT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        debit_account_code_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Account Code"
            }
        ));
        debit_account_code_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(debit_account_code_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        debit_amount_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Amount"
            }
        ));
        debit_amount_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane6.setViewportView(debit_amount_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        debit_account_code.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        debit_account_code.setEditable(true);
        debit_account_code.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("account_names","account_id")));
        debit_account_code.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                debit_account_codeItemStateChanged(evt);
            }
        });
        debit_account_code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                debit_account_codeKeyPressed(evt);
            }
        });

        debit_description.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                debit_descriptionFocusLost(evt);
            }
        });
        debit_description.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                debit_descriptionKeyPressed(evt);
            }
        });

        debit_amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                debit_amountKeyPressed(evt);
            }
        });

        jButton5.setText("Clear all");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.setText("Clear Last ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        debit_total.setBackground(new java.awt.Color(255, 204, 204));

        jLabel16.setText("Total");

        debit_account_name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        debit_account_name.setForeground(new java.awt.Color(153, 153, 153));
        debit_account_name.setText("Account name here");

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });
        send.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sendFocusGained(evt);
            }
        });

        debit_description_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Discription"
            }
        ));
        debit_description_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane7.setViewportView(debit_description_table);
        credit_account_code_table.setAutoResizeMode(credit_account_code_table.AUTO_RESIZE_OFF);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(debit_account_code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jButton9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(debit_total, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(debit_description, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, 0)
                                    .addComponent(debit_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(debit_account_name, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(send)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debit_account_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(debit_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(debit_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debit_account_name)
                    .addComponent(send))
                .addGap(3, 3, 3)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(debit_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton9)
                        .addComponent(jButton5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 51, 51));
        jButton10.setText("DELETE ENTRY");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(388, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addGap(372, 372, 372))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(211, 211, 211)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(difference, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Cheque_pay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(466, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Cheque_pay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(difference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ACC_View_Database_Handling_Journals db = new ACC_View_Database_Handling_Journals();

    public void Fill_Edit_Form(int tr_no) {

        try {
            String current = null;

            String given_period = null;

            try {
                ResultSet rs = dbm.query("SELECT * FROM acc_current_period_act");
                while (rs.next()) {
                    current = rs.getString("period");
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                ResultSet rs1 = dbm.query("SELECT * FROM acc_current_period");
                while (rs1.next()) {
                    given_period = rs1.getString("period");
                }
                rs1.close();
            } catch (SQLException ex) {
                Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (current.equals(given_period)) {

                ref_no.setText(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "ref_no"));
                journal_no.setText(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "journal_no"));
                pay_type.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "pay_type"));
                if ("Cheque".equals(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "pay_type"))) {
                    bank_code.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "bank_id"));
                    branch_code.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "branch_id"));
                    chequeNo.setText(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "cheque_no"));
                    chequeDate.setDate(java.sql.Date.valueOf(dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "cheque_date")));
                } else {

                }
                String[] s = new String[3];
                s = dbm.checknReturnStringDataReceipts("account_journal_main", "tr_no", tr_no, "date").split("-");
                yearfield.setText(s[0]);
                monthfield.setText(datehandler.Return_month(Integer.parseInt(s[1])));
                dayfield.setText("" + Integer.parseInt(s[2]));
            } else {
                ref_no.setText(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "ref_no"));
                journal_no.setText(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "journal_no"));
                pay_type.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "pay_type"));
                if ("Cheque".equals(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "pay_type"))) {
                    bank_code.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "bank_id"));
                    branch_code.setSelectedItem(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "branch_id"));
                    chequeNo.setText(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "cheque_no"));
                    chequeDate.setDate(java.sql.Date.valueOf(dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "cheque_date")));
                } else {

                }
                String[] s = new String[3];
                s = dbm.checknReturnStringDataReceipts("account_journal_main_all", "tr_no", tr_no, "date").split("-");
                yearfield.setText(s[0]);
                monthfield.setText(datehandler.Return_month(Integer.parseInt(s[1])));
                dayfield.setText("" + Integer.parseInt(s[2]));

            }

            /// edited upto here
            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(debit_account_code_table, "debit_account_id", 0, 1, 50, "tr_no", tr_no, 2);
            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(debit_description_table, "debit_description", 0, 1, 50, "tr_no", tr_no, 2);
            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(debit_amount_table, "debit_amount", 0, 1, 50, "tr_no", tr_no, 2);

            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(credit_account_code_table, "credit_account_id", 0, 1, 50, "tr_no", tr_no, 3);
            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(credit_description_table, "credit_description", 0, 1, 50, "tr_no", tr_no, 3);
            db.Inserting_To_The_Table_Filtered_Journal_Main_Search(credit_amount_table, "credit_amount", 0, 1, 50, "tr_no", tr_no, 3);

            //
            int i = 0;
            String acnt_class;
            double debit_value;
            double debit_updated_value;
            /*   while (debit_account_code_table.getValueAt(i, 0) != null) {
             debit_value = Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
             acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "account_class");
             if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
             debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) - debit_value;
             } else {
             debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) + debit_value;
             }
             dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance", debit_updated_value);
             i++;
             }*/

            countd = 0;
            i = 0;
            while (debit_account_code_table.getValueAt(i, 0) != null) {
                countd++;
                i++;
            }
            int[] acc_ids_d = new int[countd];
            double[] acc_amts_d = new double[countd];

            i = 0;
            while (debit_account_code_table.getValueAt(i, 0) != null) {
                debit_value = Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                acc_ids_d[i] = Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0));
                acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "account_class");
                if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                    acc_amts_d[i] = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) - debit_value;
                } else {
                    acc_amts_d[i] = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) + debit_value;
                }
                // dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance", debit_updated_value);
                i++;
            }

            d_acc_amts = acc_amts_d;
            d_acc_id = acc_ids_d;

            double credit_value;
            double credit_updated_value;
            i = 0;
            /*  while (credit_account_code_table.getValueAt(i, 0) != null) {
             credit_value = Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
             acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "account_class");
             if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
             credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) + credit_value;
             } else {
             credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) - credit_value;
             }
             dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance", credit_updated_value);
             i++;
             }*/

            countc = 0;
            i = 0;
            while (credit_account_code_table.getValueAt(i, 0) != null) {
                countc++;
                i++;
            }
            int[] acc_ids_c = new int[countc];
            double[] acc_amts_c = new double[countc];

            i = 0;
            while (credit_account_code_table.getValueAt(i, 0) != null) {
                credit_value = Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                acc_ids_c[i] = Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0));
                acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "account_class");
                if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                    acc_amts_c[i] = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) + credit_value;
                } else {
                    acc_amts_c[i] = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) - credit_value;
                }
                // dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance", debit_updated_value);
                i++;
            }

            c_acc_amts = acc_amts_c;
            c_acc_id = acc_ids_c;

            ///
            // Setting total and difference texts
            double tot = 0;
            i = 0;
            while (debit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                i++;
            }
            debit_total.setText("" + tot);
            tot = 0;
            i = 0;
            while (credit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                i++;
            }
            credit_total.setText("" + tot);
            difference.setText("" + (Double.parseDouble(debit_total.getText()) - Double.parseDouble(credit_total.getText())));

        } catch (PropertyVetoException ex) {
            Logger.getLogger(ACC_Edit_journals1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    private void pay_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pay_typeItemStateChanged
        if ("Cash".equals(pay_type.getSelectedItem().toString())) {
            //  Cheque_pay.setVisible(false);
            debit_account_code.requestFocusInWindow();
        } else {
            bank_code.requestFocusInWindow();
            //  Cheque_pay.setVisible(true);
        }
    }//GEN-LAST:event_pay_typeItemStateChanged

    private void pay_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pay_typeActionPerformed

        /*     String selection = (String) pay_type.getSelectedItem();
         if (selection.equalsIgnoreCase("Cash")) {
         Cheque_pay.setVisible(false);
         }
         if (selection.equalsIgnoreCase("Cheque")) {
         Cheque_pay.setVisible(true);

         } */

    }//GEN-LAST:event_pay_typeActionPerformed

    private void pay_typeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pay_typeKeyPressed

        interface_events.Change_focus_Enterkey_c(debit_account_code, evt);

    }//GEN-LAST:event_pay_typeKeyPressed

    private void ref_noKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ref_noKeyPressed
        interface_events.Change_focus_Enterkey_t(dayfield, evt);
    }//GEN-LAST:event_ref_noKeyPressed

    private void journal_noKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_journal_noKeyPressed
        interface_events.Change_focus_Enterkey_c(pay_type, evt);
    }//GEN-LAST:event_journal_noKeyPressed

    private void monthfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthfieldKeyPressed
        if (monthfield.getText().equals("Jan")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Dec");
                int yr = Integer.parseInt(yearfield.getText());

                yearfield.setText("" + (yr - 1));
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Feb");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Feb")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jan");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Mar");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Mar")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Feb");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();
            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Apr");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Apr")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Mar");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();
            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("May");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("May")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Apr");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                monthfield.setText("Jun");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Jun")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("May");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Jul");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Jul")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jun");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Aug");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Aug")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jul");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Sep");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Sep")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Aug");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Oct");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Oct")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Sep");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Nov");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Nov")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Oct");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Dec");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Dec")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Nov");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Jan");
                int yr = Integer.parseInt(yearfield.getText());

                yearfield.setText("" + (yr + 1));
                monthfield.selectAll();
            }

        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            dayfield.requestFocus();
            dayfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            yearfield.requestFocus();
            yearfield.selectAll();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            journal_no.requestFocus();

        }
    }//GEN-LAST:event_monthfieldKeyPressed

    private void yearfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearfieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            yearfield.setText("" + (Integer.parseInt(yearfield.getText()) + 1));
            yearfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            yearfield.setText("" + (Integer.parseInt(yearfield.getText()) - 1));
            yearfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            monthfield.requestFocus();
            monthfield.selectAll();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            journal_no.requestFocus();

        }
    }//GEN-LAST:event_yearfieldKeyPressed

    private void dayfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayfieldKeyPressed
        ///////////////////////////////////////////////////  Days Decrement/////////////////////////////////////////////////////////////////////////////

        if (dayfield.getText().equals("1")) {           // Jumping to 31 and 30 from 1st
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

                if (monthfield.getText().equals("Feb") || monthfield.getText().equals("Apr") || monthfield.getText().equals("Jun") || monthfield.getText().equals("Aug") || monthfield.getText().equals("Sep") || monthfield.getText().equals("Nov") || monthfield.getText().equals("Feb")) {
                    dayfield.setText("31");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("May") || monthfield.getText().equals("Jul") || monthfield.getText().equals("Oct") || monthfield.getText().equals("Dec")) {
                    dayfield.setText("30");
                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("Mar")) {     // from march 1st jump to 28th or 29th checking leap years
                    int yr = Integer.parseInt(yearfield.getText());
                    if (yr % 4 == 0) {
                        if (yr % 100 == 0) {
                            if (yr % 400 == 0) {
                                dayfield.setText("29"); // Leap Year
                            }
                        }
                        if (yr % 100 == 0) {
                            if (yr % 400 != 0) {
                                dayfield.setText("28"); // not a leap year
                            }
                        }
                        dayfield.setText("29");       // leap year

                    }
                    if (yr % 4 != 0) {
                        dayfield.setText("28");       // not a leap year
                    }
                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("Jan")) {            // From jan 1st jump to december 31st decrementing year
                    dayfield.setText("31");

                    int yr = Integer.parseInt(yearfield.getText());
                    monthfield.setText("Dec");
                    yearfield.setText("" + (yr - 1));    // year
                }
                dayfield.selectAll();
            }                                           // /// decrementing normal values
        } else if (dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) - 1));
                dayfield.selectAll();
            }
        }
        /////////////////////////////////////////////////  Days Increment///////////////////////////////////////////////////////////////////////////////////////////////////
        if (dayfield.getText().equals("30")) {               // from 30th to 1st of next month
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                if (monthfield.getText().equals("Apr") || monthfield.getText().equals("Jun") || monthfield.getText().equals("Sep") || monthfield.getText().equals("Nov")) {
                    dayfield.setText("0");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));

                }
                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));
                dayfield.selectAll();
            }

        } else if (dayfield.getText().equals("31")) {            // from 31st to 1st of next month
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                if (monthfield.getText().equals("Jan") || monthfield.getText().equals("Mar") || monthfield.getText().equals("May") || monthfield.getText().equals("Jul") || monthfield.getText().equals("Aug") || monthfield.getText().equals("Oct")) {
                    dayfield.setText("1");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));

                } else if (monthfield.getText().equals("Dec")) {      // December to january incrementing the year

                    dayfield.setText("1");

                    int yr = Integer.parseInt(yearfield.getText());
                    monthfield.setText("Jan");
                    yearfield.setText("" + (yr + 1));
                }
                dayfield.selectAll();
            }

        } else if (monthfield.getText().equals("Feb")) {                    // for february
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                if (dayfield.getText().equals("28")) {                    // at 28 check for leap year
                    int yr = Integer.parseInt(yearfield.getText());
                    if (yr % 4 == 0) {
                        if (yr % 100 == 0) {
                            if (yr % 400 == 0) {
                                dayfield.setText("29"); // Leap Year       // increment to 29
                            }
                        }
                        if (yr % 100 == 0) {
                            if (yr % 400 != 0) {
                                dayfield.setText("1");
                                int mnth = datechooser.return_index(monthfield.getText());
                                monthfield.setText(datechooser.Return_month(mnth + 1));

                                // not a leap year                             // jump to next month
                            }
                        }
                        dayfield.setText("29");       // leap year             // increment to 29th

                    }
                    if (yr % 4 != 0) {
                        dayfield.setText("1");
                        int mnth = datechooser.return_index(monthfield.getText());
                        monthfield.setText(datechooser.Return_month(mnth + 1));                  // not a leap year
                    }

                } else if (dayfield.getText().equals("29")) {              // at 29 jump to next month normally
                    dayfield.setText("1");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));
                    // incrementing normal values/////////////////////// for february separately
                } else if (dayfield.getText().equals("1") || dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                        || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                        || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                        || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                        || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                        || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                        || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {

                    dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));

                }
                dayfield.selectAll();
            }
            // incrementing normal values
        } else if (dayfield.getText().equals("1") || dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));
                dayfield.selectAll();

            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            monthfield.requestFocus();
            monthfield.selectAll();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            journal_no.requestFocus();

        }
    }//GEN-LAST:event_dayfieldKeyPressed

    private void datePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePicker1ActionPerformed
        java.sql.Date datef = new java.sql.Date(datePicker1.getDate().getTime());

        dayfield.setText("" + Integer.parseInt(datehandler.get_day(datef)));
        monthfield.setText(datehandler.get_month(datef));
        yearfield.setText(datehandler.get_year(datef));
        journal_no.requestFocus();

    }//GEN-LAST:event_datePicker1ActionPerformed

    private void credit_account_codeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_credit_account_codeItemStateChanged
        DatabaseManager dbm = DatabaseManager.getDbCon();
        String Name = null;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int item = Integer.parseInt(evt.getItem().toString());
            try {
                ResultSet query = dbm.query("SELECT * FROM account_names WHERE account_id =" + item + "");
                while (query.next()) {
                    Name = query.getString("account_name");
                }
            } catch (SQLException ex) {
            }
            credit_account_name.setText("" + Name);
        }
        credit_description.requestFocus();
    }//GEN-LAST:event_credit_account_codeItemStateChanged

    private void credit_descriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_credit_descriptionKeyPressed
        interface_events.Change_focus_Enterkey_t(credit_amount, evt);
    }//GEN-LAST:event_credit_descriptionKeyPressed

    private void credit_amountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_credit_amountKeyPressed
        interface_events.Change_focus_Enterkey_t_b(ref_no, send2, evt);
    }//GEN-LAST:event_credit_amountKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            credit_account_code_table.setValueAt(null, i, 0);
            credit_description_table.setValueAt(null, i, 0);
            credit_amount_table.setValueAt(null, i, 0);
            i++;
        }
        double tot = 0;
        i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
            i++;
        }
        credit_total.setText("" + tot);
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            i++;
        }
        i--;
        credit_account_code_table.setValueAt(null, i, 0);
        credit_description_table.setValueAt(null, i, 0);
        credit_amount_table.setValueAt(null, i, 0);

        double tot = 0;
        i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
            i++;
        }
        credit_total.setText("" + tot);
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));

    }//GEN-LAST:event_jButton2ActionPerformed

    private void send2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send2ActionPerformed
        int i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            i++;
        }

        credit_account_code_table.setValueAt(credit_account_code.getSelectedItem().toString(), i, 0);
        credit_description_table.setValueAt(credit_description.getText(), i, 0);
        credit_amount_table.setValueAt(credit_amount.getText(), i, 0);
        credit_account_code.setSelectedIndex(0);
        credit_amount.setText(null);

        // Total calculation
        double tot = 0;
        i = 0;
        while (credit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
            i++;
        }
        credit_total.setText("" + tot);

        // Difference Calculation
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));

        if (Double.parseDouble(difference.getText()) == 0) {

            if (ref_no.getText().length() != 0 && journal_no.getText().length() != 0 && debit_account_code_table.getValueAt(0, 0) != null && credit_account_code_table.getValueAt(0, 0) != null) {
                save.setEnabled(true);
                save.requestFocus();

            }
        } else {
            msg.showMessage("There is a Difference", "Journal Entry", "info");
            credit_account_code.requestFocus();
        }

    }//GEN-LAST:event_send2ActionPerformed

    private void send2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_send2FocusGained
        interface_events.Respond_enter(send2, evt);
    }//GEN-LAST:event_send2FocusGained

    private void chequeNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chequeNoKeyPressed
        interface_events.Change_focus_Enterkey_Cal(chequeDate, evt);
    }//GEN-LAST:event_chequeNoKeyPressed

    private void bank_codeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bank_codeItemStateChanged
        DatabaseManager dbm = DatabaseManager.getDbCon();
        String Name = null;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int item = Integer.parseInt(evt.getItem().toString());
            try {
                ResultSet query = dbm.query("SELECT * FROM bank WHERE bank_id =" + item + "");
                while (query.next()) {
                    Name = query.getString("bank_name");
                }
            } catch (SQLException ex) {
            }
            bank_name.setText("" + Name);
        }
        interface_events.Change_focus_Enterkey_c(branch_code, null);
    }//GEN-LAST:event_bank_codeItemStateChanged

    private void bank_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bank_codeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bank_codeActionPerformed

    private void branch_codeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_branch_codeItemStateChanged
        DatabaseManager dbm = DatabaseManager.getDbCon();
        String Name = null;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int item = Integer.parseInt(evt.getItem().toString());
            try {
                ResultSet query = dbm.query("SELECT * FROM bank_branch WHERE branch_id =" + item + "");
                while (query.next()) {
                    Name = query.getString("branch_name");
                }
            } catch (SQLException ex) {
            }
            branch_name.setText("" + Name);
        }
        interface_events.Change_focus_Enterkey_t(chequeNo, null);
    }//GEN-LAST:event_branch_codeItemStateChanged

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        String current = null;

        String given_period = null;

        try {
            ResultSet rs = dbm.query("SELECT * FROM acc_current_period_act");
            while (rs.next()) {
                current = rs.getString("period");
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            ResultSet rs1 = dbm.query("SELECT * FROM acc_current_period");
            while (rs1.next()) {
                given_period = rs1.getString("period");
            }
            rs1.close();
        } catch (SQLException ex) {
            Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (current.equals(given_period)) {

            jaobject.setTrNo(tr_no);
            double tot = 0;
            int i = 0;
            while (debit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                i++;
            }
            debit_total.setText("" + tot);
            tot = 0;
            i = 0;
            while (credit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                i++;
            }
            credit_total.setText("" + tot);
            tot = 0;
            difference.setText("" + (Double.parseDouble(debit_total.getText()) - Double.parseDouble(credit_total.getText())));
            if (Double.parseDouble(difference.getText()) == 0) {
                try {

                    boolean addToMainJournalDataBase = false;
                    jaobject.setRefNo(ref_no.getText());
                    jaobject.setJournalNo(journal_no.getText());
                    jaobject.setDate(datechooser.Return_date(yearfield, monthfield, dayfield));

                    jaobject.setPayType(pay_type.getSelectedItem().toString());
                    DatabaseManager dbm = DatabaseManager.getDbCon();

                    // Adding main common parts of the interface
                    if ("Cheque".equals(jaobject.getPayType())) {

                        jaobject.setBankCode(Integer.parseInt(bank_code.getSelectedItem().toString()));

                        jaobject.setBankName(dbm.checknReturnData("bank", "bank_id", jaobject.getBankCode(), "bank_name"));
                        jaobject.setBranchCode(Integer.parseInt(branch_code.getSelectedItem().toString()));

                        jaobject.setBranchName(dbm.checknReturnData("bank_branch", "branch_id", jaobject.getBranchCode(), "branch_name"));
                        jaobject.setChequeNo(chequeNo.getText());

                        java.sql.Date date2 = new java.sql.Date(chequeDate.getDate().getTime());
                        jaobject.setChequeDate(date2);

                        addToMainJournalDataBase = jaobject.UpdateMainDatabaseBank(tr_no);
                    } else {
                        jaobject.setBankCode(0);
                        jaobject.setBankName(null);
                        jaobject.setBranchCode(0);
                        jaobject.setBranchName(null);
                        jaobject.setChequeDate(null);
                        jaobject.setChequeNo(null);
                        addToMainJournalDataBase = jaobject.UpdateMainDatabaseCash(tr_no);
                    }

                    if (addToMainJournalDataBase == true) {

                        msg.showMessage("Journal Entry is saved to Transaction no-" + tr_no, "Journal", "info");

                        // Debit Side of the interface
                        // Delete DebitSide
                        jaobject.DeleteDebitEntries(tr_no);
                        i = 0;

                        for (i = 0; i < countd; i++) {
                            dbm.updateDatabase("account_names", "account_id", d_acc_id[i], "current_balance", d_acc_amts[i]);
                        }

                        // Credit Side of the interface
                        // Delete CreditSide
                        jaobject.DeleteCreditEntries(tr_no);
                        i = 0;

                        for (i = 0; i < countc; i++) {
                            dbm.updateDatabase("account_names", "account_id", c_acc_id[i], "current_balance", c_acc_amts[i]);
                        }

                        i = 0;
                        while (debit_account_code_table.getValueAt(i, 0) != null) {
                            i++;
                        }
                        String debit_acnt_name;

                        for (int j = 0; j <= i - 1; j++) {
                            debit_acnt_name = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(j, 0)), "account_name");
                            jaobject.addToDebitDataBase(Integer.parseInt((String) debit_account_code_table.getValueAt(j, 0)), debit_acnt_name, (String) debit_description_table.getValueAt(j, 0), Double.parseDouble((String) debit_amount_table.getValueAt(j, 0)));
                        }

                        // Credit Side of the interface
                        i = 0;
                        while (credit_account_code_table.getValueAt(i, 0) != null) {
                            i++;
                        }

                        String credit_acnt_name;

                        for (int j = 0; j <= i - 1; j++) {
                            credit_acnt_name = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(j, 0)), "account_name");
                            jaobject.addToCreditDataBase(Integer.parseInt((String) credit_account_code_table.getValueAt(j, 0)), credit_acnt_name, (String) credit_description_table.getValueAt(j, 0), Double.parseDouble((String) credit_amount_table.getValueAt(j, 0)));
                        }

                        // adding the relevant value to the current balance of the debit account
                        String acnt_class;
                        double debit_value;
                        double debit_updated_value;
                        i = 0;
                        while (debit_account_code_table.getValueAt(i, 0) != null) {
                            debit_value = Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                            acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "account_class");
                            if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                                debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) + debit_value;
                            } else {
                                debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) - debit_value;
                            }
                            dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance", debit_updated_value);
                            i++;
                        }

                        // adding the relevant value to the current balance of the credit account
                        i = 0;
                        acnt_class = null;
                        double credit_value;
                        double credit_updated_value;
                        while (credit_account_code_table.getValueAt(i, 0) != null) {
                            credit_value = Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                            acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "account_class");
                            if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                                credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) - credit_value;
                            } else {
                                credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) + credit_value;
                            }
                            dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance", credit_updated_value);
                            i++;
                        }

                        ref_no.setText(null);
                        journal_no.setText(null);
                        pay_type.setSelectedIndex(0);
                        bank_code.setSelectedIndex(0);
                        branch_code.setSelectedIndex(0);
                        bank_name.setText(null);
                        branch_name.setText(null);
                        chequeNo.setText(null);
                        debit_account_code.setSelectedIndex(0);
                        debit_description.setText(null);
                        debit_amount.setText(null);
                        debit_account_name.setText(null);
                        credit_account_code.setSelectedIndex(0);
                        credit_account_name.setText(null);
                        credit_description.setText(null);
                        credit_amount.setText(null);
                        debit_total.setText(null);
                        credit_total.setText(null);
                        difference.setText(null);

                        // clear credit table all
                        {
                            int j = 0;
                            while (credit_account_code_table.getValueAt(j, 0) != null) {
                                credit_account_code_table.setValueAt(null, j, 0);
                                credit_description_table.setValueAt(null, j, 0);
                                credit_amount_table.setValueAt(null, j, 0);
                                j++;
                            }
                        }

                        // clear debit table all
                        {
                            int j = 0;
                            while (debit_account_code_table.getValueAt(j, 0) != null) {
                                debit_account_code_table.setValueAt(null, j, 0);
                                debit_description_table.setValueAt(null, j, 0);
                                debit_amount_table.setValueAt(null, j, 0);
                                j++;
                            }
                        }
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(ACC_journals.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                MessageBox msg = new MessageBox();
                msg.showMessage("There is a Difference.. Please Check Again", "Journal", "info");
            }
        } else {
            jaobject.setTrNo(tr_no);
            double tot = 0;
            int i = 0;
            while (debit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                i++;
            }
            debit_total.setText("" + tot);
            tot = 0;
            i = 0;
            while (credit_account_code_table.getValueAt(i, 0) != null) {
                tot = tot + Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                i++;
            }
            credit_total.setText("" + tot);
            tot = 0;
            difference.setText("" + (Double.parseDouble(debit_total.getText()) - Double.parseDouble(credit_total.getText())));
            if (Double.parseDouble(difference.getText()) == 0) {
                try {

                    boolean addToMainJournalDataBaseall = false;
                    jaobject.setRefNo(ref_no.getText());
                    jaobject.setJournalNo(journal_no.getText());
                    jaobject.setDate(datechooser.Return_date(yearfield, monthfield, dayfield));

                    jaobject.setPayType(pay_type.getSelectedItem().toString());
                    DatabaseManager dbm = DatabaseManager.getDbCon();

                    // Adding main common parts of the interface
                    if ("Cheque".equals(jaobject.getPayType())) {

                        jaobject.setBankCode(Integer.parseInt(bank_code.getSelectedItem().toString()));

                        jaobject.setBankName(dbm.checknReturnData("bank", "bank_id", jaobject.getBankCode(), "bank_name"));
                        jaobject.setBranchCode(Integer.parseInt(branch_code.getSelectedItem().toString()));

                        jaobject.setBranchName(dbm.checknReturnData("bank_branch", "branch_id", jaobject.getBranchCode(), "branch_name"));
                        jaobject.setChequeNo(chequeNo.getText());

                        java.sql.Date date2 = new java.sql.Date(chequeDate.getDate().getTime());
                        jaobject.setChequeDate(date2);

                        addToMainJournalDataBaseall = jaobject.UpdateMainDatabaseBankall(tr_no);
                    } else {
                        jaobject.setBankCode(0);
                        jaobject.setBankName(null);
                        jaobject.setBranchCode(0);
                        jaobject.setBranchName(null);
                        jaobject.setChequeDate(null);
                        jaobject.setChequeNo(null);
                        addToMainJournalDataBaseall = jaobject.UpdateMainDatabaseCashall(tr_no);
                    }

                    if (addToMainJournalDataBaseall == true) {

                        msg.showMessage("Journal Entry is saved to Transaction no-" + tr_no, "Journal", "info");

                    // Debit Side of the interface
                        // Delete DebitSide
                   /*     jaobject.DeleteDebitEntries(tr_no);
                         i = 0;

                         for (i = 0; i < countd; i++) {
                         dbm.updateDatabase("account_names", "account_id", d_acc_id[i], "current_balance", d_acc_amts[i]);
                         }
                         */
                        // Credit Side of the interface
                        // Delete CreditSide
                    /*    jaobject.DeleteCreditEntries(tr_no);
                         i = 0;

                         for (i = 0; i < countc; i++) {
                         dbm.updateDatabase("account_names", "account_id", c_acc_id[i], "current_balance", c_acc_amts[i]);
                         }
                         */
                        i = 0;
                        while (debit_account_code_table.getValueAt(i, 0) != null) {
                            i++;
                        }
                        String debit_acnt_name;

                        for (int j = 0; j <= i - 1; j++) {
                            debit_acnt_name = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(j, 0)), "account_name");
                            jaobject.addToDebitDataBaseall(Integer.parseInt((String) debit_account_code_table.getValueAt(j, 0)), debit_acnt_name, (String) debit_description_table.getValueAt(j, 0), Double.parseDouble((String) debit_amount_table.getValueAt(j, 0)));
                        }

                        // Credit Side of the interface
                        i = 0;
                        while (credit_account_code_table.getValueAt(i, 0) != null) {
                            i++;
                        }

                        String credit_acnt_name;

                        for (int j = 0; j <= i - 1; j++) {
                            credit_acnt_name = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(j, 0)), "account_name");
                            jaobject.addToCreditDataBaseall(Integer.parseInt((String) credit_account_code_table.getValueAt(j, 0)), credit_acnt_name, (String) credit_description_table.getValueAt(j, 0), Double.parseDouble((String) credit_amount_table.getValueAt(j, 0)));
                        }

                        // adding the relevant value to the current balance of the debit account
                    /*    String acnt_class;
                         double debit_value;
                         double debit_updated_value;
                         i = 0;
                         while (debit_account_code_table.getValueAt(i, 0) != null) {
                         debit_value = Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
                         acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "account_class");
                         if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                         debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) + debit_value;
                         } else {
                         debit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance")) - debit_value;
                         }
                         dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) debit_account_code_table.getValueAt(i, 0)), "current_balance", debit_updated_value);
                         i++;
                         }

                         // adding the relevant value to the current balance of the credit account
                         i = 0;
                         acnt_class = null;
                         double credit_value;
                         double credit_updated_value;
                         while (credit_account_code_table.getValueAt(i, 0) != null) {
                         credit_value = Double.parseDouble((String) credit_amount_table.getValueAt(i, 0));
                         acnt_class = dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "account_class");
                         if ("Current Asset".equals(acnt_class) || "Fixed Asset".equals(acnt_class) || "Expense".equals(acnt_class)) {
                         credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) - credit_value;
                         } else {
                         credit_updated_value = Double.parseDouble((String) dbm.checknReturnData("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance")) + credit_value;
                         }
                         dbm.updateDatabase("account_names", "account_id", Integer.parseInt((String) credit_account_code_table.getValueAt(i, 0)), "current_balance", credit_updated_value);
                         i++;
                         }*/
                    }
                    ref_no.setText(null);
                    journal_no.setText(null);
                    pay_type.setSelectedIndex(0);
                    bank_code.setSelectedIndex(0);
                    branch_code.setSelectedIndex(0);
                    bank_name.setText(null);
                    branch_name.setText(null);
                    chequeNo.setText(null);
                    debit_account_code.setSelectedIndex(0);
                    debit_description.setText(null);
                    debit_amount.setText(null);
                    debit_account_name.setText(null);
                    credit_account_code.setSelectedIndex(0);
                    credit_account_name.setText(null);
                    credit_description.setText(null);
                    credit_amount.setText(null);
                    debit_total.setText(null);
                    credit_total.setText(null);
                    difference.setText(null);

                    // clear credit table all
                    {
                        int j = 0;
                        while (credit_account_code_table.getValueAt(j, 0) != null) {
                            credit_account_code_table.setValueAt(null, j, 0);
                            credit_description_table.setValueAt(null, j, 0);
                            credit_amount_table.setValueAt(null, j, 0);
                            j++;
                        }
                    }

                    // clear debit table all
                    {
                        int j = 0;
                        while (debit_account_code_table.getValueAt(j, 0) != null) {
                            debit_account_code_table.setValueAt(null, j, 0);
                            debit_description_table.setValueAt(null, j, 0);
                            debit_amount_table.setValueAt(null, j, 0);
                            j++;
                        }
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(ACC_journals.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                MessageBox msg = new MessageBox();
                msg.showMessage("There is a Difference.. Please Check Again", "Journal", "info");
            }

        }

    }//GEN-LAST:event_saveActionPerformed

    private void saveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_saveFocusGained
        interface_events.Respond_enter(save, evt);
    }//GEN-LAST:event_saveFocusGained

    private void debit_account_codeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_debit_account_codeItemStateChanged
        DatabaseManager dbm = DatabaseManager.getDbCon();
        String Name = null;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int item = Integer.parseInt(evt.getItem().toString());
            try {
                ResultSet query = dbm.query("SELECT * FROM account_names WHERE account_id =" + item + "");
                while (query.next()) {
                    Name = query.getString("account_name");
                }
            } catch (SQLException ex) {
            }
            debit_account_name.setText("" + Name);
        }
        debit_description.requestFocus();
    }//GEN-LAST:event_debit_account_codeItemStateChanged

    private void debit_account_codeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debit_account_codeKeyPressed

    }//GEN-LAST:event_debit_account_codeKeyPressed

    private void debit_descriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_debit_descriptionFocusLost
        credit_description.setText(debit_description.getText());
    }//GEN-LAST:event_debit_descriptionFocusLost

    private void debit_descriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debit_descriptionKeyPressed
        interface_events.Change_focus_Enterkey_t(debit_amount, evt);
    }//GEN-LAST:event_debit_descriptionKeyPressed

    private void debit_amountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debit_amountKeyPressed
        interface_events.Change_focus_Enterkey_t_b(ref_no, send, evt);
    }//GEN-LAST:event_debit_amountKeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            debit_account_code_table.setValueAt(null, i, 0);
            debit_description_table.setValueAt(null, i, 0);
            debit_amount_table.setValueAt(null, i, 0);
            i++;
        }
        double tot = 0;
        i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
            i++;
        }
        debit_total.setText("" + tot);
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            i++;
        }
        i--;
        debit_account_code_table.setValueAt(null, i, 0);
        debit_description_table.setValueAt(null, i, 0);
        debit_amount_table.setValueAt(null, i, 0);

        double tot = 0;
        i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
            i++;
        }
        debit_total.setText("" + tot);
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));
    }//GEN-LAST:event_jButton9ActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        int i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            i++;
        }

        debit_account_code_table.setValueAt(debit_account_code.getSelectedItem().toString(), i, 0);
        debit_description_table.setValueAt(debit_description.getText(), i, 0);
        debit_amount_table.setValueAt(debit_amount.getText(), i, 0);
        debit_account_code.setSelectedIndex(0);
        debit_amount.setText(null);
        double tot = 0;
        i = 0;
        while (debit_account_code_table.getValueAt(i, 0) != null) {
            tot = tot + Double.parseDouble((String) debit_amount_table.getValueAt(i, 0));
            i++;
        }
        debit_total.setText("" + tot);
        difference.setText("" + (stringToDoubleNum(debit_total.getText()) - stringToDoubleNum(credit_total.getText())));

        credit_account_code.requestFocus();

    }//GEN-LAST:event_sendActionPerformed

    private void sendFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sendFocusGained
        interface_events.Respond_enter(send, evt);
    }//GEN-LAST:event_sendFocusGained

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        String current = null;

        String given_period = null;

        try {
            ResultSet rs = dbm.query("SELECT * FROM acc_current_period_act");
            while (rs.next()) {
                current = rs.getString("period");
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            ResultSet rs1 = dbm.query("SELECT * FROM acc_current_period");
            while (rs1.next()) {
                given_period = rs1.getString("period");
            }
            rs1.close();
        } catch (SQLException ex) {
            Logger.getLogger(ACC_Edit_Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (current.equals(given_period)) {

            int reply = JOptionPane.showConfirmDialog(null, "Are You Sure?", "Delete Entry", JOptionPane.YES_NO_OPTION);

            if (reply == JOptionPane.YES_OPTION) {

                dbm.CheckNDeleteFromDataBase("account_journal_main", "tr_no", tr_no);
                dbm.CheckNDeleteFromDataBase("account_journal_debitside", "tr_no", tr_no);
                dbm.CheckNDeleteFromDataBase("account_journal_creditside", "tr_no", tr_no);

                int i = 0;

                // Debit Side of the interface
                // Delete DebitSide
                for (i = 0; i < countd; i++) {
                    dbm.updateDatabase("account_names", "account_id", d_acc_id[i], "current_balance", d_acc_amts[i]);
                }

                // Credit Side of the interface
                // Delete CreditSide
                i = 0;

                for (i = 0; i < countc; i++) {
                    dbm.updateDatabase("account_names", "account_id", c_acc_id[i], "current_balance", c_acc_amts[i]);
                }

                ref_no.setText(null);
                journal_no.setText(null);
                pay_type.setSelectedIndex(0);
                bank_code.setSelectedIndex(0);
                branch_code.setSelectedIndex(0);
                bank_name.setText(null);
                branch_name.setText(null);
                chequeNo.setText(null);
                debit_account_code.setSelectedIndex(0);
                debit_description.setText(null);
                debit_amount.setText(null);
                debit_account_name.setText(null);
                credit_account_code.setSelectedIndex(0);
                credit_account_name.setText(null);
                credit_description.setText(null);
                credit_amount.setText(null);
                debit_total.setText(null);
                credit_total.setText(null);
                difference.setText(null);

                // clear credit table all
                {
                    int j = 0;
                    while (credit_account_code_table.getValueAt(j, 0) != null) {
                        credit_account_code_table.setValueAt(null, j, 0);
                        credit_description_table.setValueAt(null, j, 0);
                        credit_amount_table.setValueAt(null, j, 0);
                        j++;
                    }
                }

                // clear debit table all
                {
                    int j = 0;
                    while (debit_account_code_table.getValueAt(j, 0) != null) {
                        debit_account_code_table.setValueAt(null, j, 0);
                        debit_description_table.setValueAt(null, j, 0);
                        debit_amount_table.setValueAt(null, j, 0);
                        j++;
                    }
                }
            }
        } else {

            int reply = JOptionPane.showConfirmDialog(null, "Are You Sure?", "Delete Entry", JOptionPane.YES_NO_OPTION);

            if (reply == JOptionPane.YES_OPTION) {

                dbm.CheckNDeleteFromDataBase("account_journal_main_all", "tr_no", tr_no);
                dbm.CheckNDeleteFromDataBase("account_journal_debitside_all", "tr_no", tr_no);
                dbm.CheckNDeleteFromDataBase("account_journal_creditside_all", "tr_no", tr_no);

                ref_no.setText(null);
                journal_no.setText(null);
                pay_type.setSelectedIndex(0);
                bank_code.setSelectedIndex(0);
                branch_code.setSelectedIndex(0);
                bank_name.setText(null);
                branch_name.setText(null);
                chequeNo.setText(null);
                debit_account_code.setSelectedIndex(0);
                debit_description.setText(null);
                debit_amount.setText(null);
                debit_account_name.setText(null);
                credit_account_code.setSelectedIndex(0);
                credit_account_name.setText(null);
                credit_description.setText(null);
                credit_amount.setText(null);
                debit_total.setText(null);
                credit_total.setText(null);
                difference.setText(null);

                // clear credit table all
                {
                    int j = 0;
                    while (credit_account_code_table.getValueAt(j, 0) != null) {
                        credit_account_code_table.setValueAt(null, j, 0);
                        credit_description_table.setValueAt(null, j, 0);
                        credit_amount_table.setValueAt(null, j, 0);
                        j++;
                    }
                }

                // clear debit table all
                {
                    int j = 0;
                    while (debit_account_code_table.getValueAt(j, 0) != null) {
                        debit_account_code_table.setValueAt(null, j, 0);
                        debit_description_table.setValueAt(null, j, 0);
                        debit_amount_table.setValueAt(null, j, 0);
                        j++;
                    }
                }
            }

        }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ACC_Edit_journals1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ACC_Edit_journals1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ACC_Edit_journals1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ACC_Edit_journals1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ACC_Edit_journals1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Cheque_pay;
    private javax.swing.JComboBox bank_code;
    private javax.swing.JLabel bank_name;
    private javax.swing.JComboBox branch_code;
    private javax.swing.JLabel branch_name;
    private com.michaelbaranov.microba.calendar.DatePicker chequeDate;
    private javax.swing.JTextField chequeNo;
    private javax.swing.JComboBox credit_account_code;
    private javax.swing.JTable credit_account_code_table;
    private javax.swing.JLabel credit_account_name;
    private javax.swing.JTextField credit_amount;
    private javax.swing.JTable credit_amount_table;
    private javax.swing.JTextField credit_description;
    private javax.swing.JTable credit_description_table;
    private javax.swing.JTextField credit_total;
    private com.michaelbaranov.microba.calendar.DatePicker datePicker1;
    private javax.swing.JPanel datepanel;
    private javax.swing.JTextField dayfield;
    private javax.swing.JComboBox debit_account_code;
    private javax.swing.JTable debit_account_code_table;
    private javax.swing.JLabel debit_account_name;
    private javax.swing.JTextField debit_amount;
    private javax.swing.JTable debit_amount_table;
    private javax.swing.JTextField debit_description;
    private javax.swing.JTable debit_description_table;
    private javax.swing.JTextField debit_total;
    private javax.swing.JTextField difference;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField journal_no;
    private javax.swing.JTextField monthfield;
    private javax.swing.JComboBox pay_type;
    private javax.swing.JTextField ref_no;
    private javax.swing.JButton save;
    private javax.swing.JButton send;
    private javax.swing.JButton send2;
    private javax.swing.JTextField yearfield;
    // End of variables declaration//GEN-END:variables
}
