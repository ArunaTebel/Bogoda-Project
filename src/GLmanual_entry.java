
import groovy.json.internal.Exceptions;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Pramo
 */
public class GLmanual_entry extends javax.swing.JPanel {

    Interface_Events interface_events = new Interface_Events();
    DatabaseManager dbm = DatabaseManager.getDbCon();
    Date_Handler datehandler = new Date_Handler();
    DateChooser_text datechooser = new DateChooser_text();
    Update update = new Update();
    double total = 0;
    GL_report_generator rep = new GL_report_generator();
    /**
     * Creates new form GLmanual_entry
     */
    GreenLeaf globject = new GreenLeaf();

    public GLmanual_entry() {
        initComponents();
        delete.setEnabled(false);
        leaf_cat.setSelectedItem("A");
        leaf_cat.setEnabled(false);
         //  Component[] comps = category_code.getComponents();

        //comps[2].addFocusListener(new Combofill(category_code,"category", "category_id"));// default///////////////////////////////////////////////////////////////////////////////////////////////
    }

    public void focus() // Focus event to bring focus to the jpanel
    {
        this.requestFocusInWindow();
        dayfield.requestFocusInWindow();
        dayfield.selectAll();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        supplier_id = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        self_transport = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        edit = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        name = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        category_code = new javax.swing.JComboBox();
        category_name = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        no_of_sacks = new javax.swing.JTextField();
        total_kg = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        sacks_weight = new javax.swing.JTextField();
        water = new javax.swing.JTextField();
        coarse_leaf = new javax.swing.JTextField();
        other = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        net_weight = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        sendButton = new javax.swing.JButton();
        leaf_cat = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        datepanel = new javax.swing.JPanel();
        monthfield = new javax.swing.JTextField();
        yearfield = new javax.swing.JTextField();
        dayfield = new javax.swing.JTextField();
        datePicker1 = new com.michaelbaranov.microba.calendar.DatePicker();
        edit1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        jLabel1.setText("User ID");

        jLabel2.setText("Name ");

        jLabel3.setText("Category");

        jLabel4.setText("Leaf Category");

        DatabaseManager dbm = DatabaseManager.getDbCon();
        supplier_id.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        supplier_id.setEditable(true);
        supplier_id.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("suppliers", "sup_id")));
        supplier_id.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                supplier_idItemStateChanged(evt);
            }
        });
        supplier_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplier_idActionPerformed(evt);
            }
        });
        supplier_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                supplier_idKeyReleased(evt);
            }
        });

        jLabel5.setText("Date");

        self_transport.setText(" Self Transport");
        self_transport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                self_transportActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel6.setText("No: of sacks");

        jLabel7.setText("Total(KG)");

        jLabel8.setText("Sacks weight");

        jLabel9.setText("Water");

        jLabel10.setText("Co: Leaf");

        jLabel11.setText("Other");

        jLabel12.setText("Net Weight");

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton1FocusGained(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));

        jButton4.setText("Supplier Status");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel16.setText("Edit Trans ID here");

        edit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap())
            .addComponent(edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        delete.setForeground(new java.awt.Color(102, 204, 0));
        delete.setText("Delete Entry");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        name.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(51, 51, 51));

        //category_code.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        category_code.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray2("category", "category_id")));
        category_code.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category_codeItemStateChanged(evt);
            }
        });
        category_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_codeActionPerformed(evt);
            }
        });
        category_code.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                category_codeCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        category_code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                category_codeKeyPressed(evt);
            }
        });

        category_name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        category_name.setForeground(new java.awt.Color(51, 51, 51));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        no_of_sacks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                no_of_sacksFocusLost(evt);
            }
        });
        no_of_sacks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                no_of_sacksKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                no_of_sacksKeyReleased(evt);
            }
        });

        total_kg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                total_kgActionPerformed(evt);
            }
        });
        total_kg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                total_kgFocusLost(evt);
            }
        });
        total_kg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                total_kgKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                total_kgKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(no_of_sacks, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(total_kg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(no_of_sacks, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total_kg, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        sacks_weight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sacks_weightFocusLost(evt);
            }
        });
        sacks_weight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sacks_weightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sacks_weightKeyReleased(evt);
            }
        });

        water.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                waterFocusLost(evt);
            }
        });
        water.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                waterKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                waterKeyReleased(evt);
            }
        });

        coarse_leaf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                coarse_leafFocusLost(evt);
            }
        });
        coarse_leaf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                coarse_leafKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                coarse_leafKeyReleased(evt);
            }
        });

        other.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                otherFocusLost(evt);
            }
        });
        other.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                otherKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                otherKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sacks_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(water, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(coarse_leaf, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(other, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sacks_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(water, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coarse_leaf, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(other, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        net_weight.setBackground(new java.awt.Color(204, 255, 204));
        net_weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                net_weightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(net_weight, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(net_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Code", "Sacks", "Total", "S:weight", "Water", "Co:Leaf", "Other", "Net W", "Transport", "Leaf Cat:"
            }
        ));
        jScrollPane1.setViewportView(table);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        sendButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sendButtonFocusGained(evt);
            }
        });

        leaf_cat.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        leaf_cat.setEditable(true);
        leaf_cat.setModel(new javax.swing.DefaultComboBoxModel(dbm.getStringArray("leaf_category", "category_name")));
        leaf_cat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                leaf_catItemStateChanged(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(153, 0, 0));

        jButton6.setText("Clear all");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Clear Last ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(153, 0, 0));

        datepanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        monthfield.setText(datehandler.get_today_month());
        monthfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                monthfieldKeyPressed(evt);
            }
        });

        yearfield.setText(datehandler.get_today_year());
        yearfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yearfieldKeyPressed(evt);
            }
        });

        dayfield.setText(Integer.parseInt(datehandler.get_today_day())+"");
        dayfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dayfieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dayfieldKeyReleased(evt);
            }
        });

        datePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePicker1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datepanelLayout = new javax.swing.GroupLayout(datepanel);
        datepanel.setLayout(datepanelLayout);
        datepanelLayout.setHorizontalGroup(
            datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dayfield, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(monthfield, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        datepanelLayout.setVerticalGroup(
            datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datepanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(datepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dayfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        edit1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edit1KeyPressed(evt);
            }
        });

        jLabel17.setText("Net Weight total");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(category_code, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(219, 219, 219)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(302, 302, 302)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(category_name, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(supplier_id, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(63, 63, 63)))
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(leaf_cat, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(self_transport))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(jButton6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(edit1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(18, 18, 18)
                                            .addComponent(datepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(10, 10, 10)
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel7))
                                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(10, 10, 10)
                                                    .addComponent(jLabel8)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel9)
                                                    .addGap(39, 39, 39)
                                                    .addComponent(jLabel10)
                                                    .addGap(32, 32, 32)
                                                    .addComponent(jLabel11))
                                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel12)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(sendButton)))))
                                    .addGap(22, 22, 22))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(datepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sendButton)
                                        .addGap(18, 18, 18))
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(230, 230, 230))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(category_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(category_code))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(supplier_id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(leaf_cat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(self_transport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton7)
                                .addComponent(jButton6)
                                .addComponent(edit1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17)))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void self_transportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_self_transportActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_self_transportActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     //   try {                 // had to put this try catch when calling datechooser.return_date.. used try catch to the block option /////////////////////////
        // adding common data to the database

        globject.setCategoryCode(category_code.getSelectedItem().toString());
        try {
            globject.setDate(datechooser.Return_date(yearfield, monthfield, dayfield));
        } catch (ParseException ex) {
            Logger.getLogger(GLmanual_entry.class.getName()).log(Level.SEVERE, null, ex);
        }
         //   double trans = Double.parseDouble(dbm.checknReturnStringData("category", "category_id", category_code.getSelectedItem().toString(), "extra_rate"));
        //  System.out.println(trans);
        int i = 0;
        // boolean st;
        if (table.getValueAt(0, 0) != null) {
            while (table.getValueAt(i, 0) != null) {
                globject.setSupplierCode(Integer.parseInt((String) table.getValueAt(i, 0)));
                globject.setLeafCategory((String) table.getValueAt(i, 9));
                globject.setNoOfSacks(Integer.parseInt((String) table.getValueAt(i, 1)));
                globject.setTotalWeight(convertString((String) table.getValueAt(i, 2)));
                globject.setSacksWeight(convertString((String) table.getValueAt(i, 3)));
                globject.setWater(convertString((String) table.getValueAt(i, 4)));
                globject.setCoarseLeaf(convertString((String) table.getValueAt(i, 5)));
                globject.setOther(convertString((String) table.getValueAt(i, 6)));
                globject.setNetQuantity(convertString((String) table.getValueAt(i, 7)));
                /*  if ("Yes".equals((String) table.getValueAt(i, 8))) {
                 st = true;
                 } else {
                 st = false;
                 }*/

                globject.setSelfTransport((double) table.getValueAt(i, 8));
             // globject.setSelfTransport((double) table.getValueAt(i, 8));
                //System.out.println(Double.parseDouble((String) table.getValueAt(i, 8)));

                i++;
                globject.addToDataBase();
//                rep.add_to_active_list(Integer.parseInt((String) table.getValueAt(i, 0)), datehandler.return_month_as_num(monthfield.getText()));

            }
            total = 0;
            edit1.setText("");
            JOptionPane.showMessageDialog(self_transport, "Success!");
        } else {
            JOptionPane.showMessageDialog(self_transport, "Empty fields detected");
        }

        //System.out.println("saved");
        int k = 0;
        int j = 0;
        while (table.getValueAt(k, 0) != null) {

            j = 0;
            while (j < 10) {

                table.setValueAt(null, k, j);
                j++;
            }
            k++;
        }
        category_code.setEnabled(true);
        dayfield.setEnabled(false);
        monthfield.setEnabled(false);
        yearfield.setEnabled(false);
        datePicker1.setEnabled(false);
        category_name.setText(" ");

        category_code.setSelectedIndex(0);
        category_code.requestFocusInWindow();

        /*   } catch (Exception ex) {
         System.out.println(ex.getMessage());
         JOptionPane.showMessageDialog(datechooser, "Error! Check inputs");
         }*/

    }//GEN-LAST:event_jButton1ActionPerformed

    private void supplier_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplier_idActionPerformed
        //System.out.println("OK"); 

    }//GEN-LAST:event_supplier_idActionPerformed

    private void net_weightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_net_weightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_net_weightActionPerformed

    private void supplier_idItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_supplier_idItemStateChanged
        if (supplier_id.getSelectedIndex() != 0) {
            try {

                DatabaseManager dbm = DatabaseManager.getDbCon();
                String Name = null;
                String category = null;
                String result2= null;
                 int i = 0;
                 int item = Integer.parseInt(supplier_id.getSelectedItem().toString());
            while (table.getValueAt(i, 0) != null) {
                if(table.getValueAt(i, 0) == item+""){ result2 = item+"";}
                i++;
            }
                //int item = Integer.parseInt(supplier_id.getSelectedItem().toString());
                String result = dbm.filterReturn2StringData("green_leaf_transactions", "sup_id", item + "", "tr_date", datechooser.Return_date(yearfield, monthfield, dayfield) + "", "tr_id");
                if (result != null ||result2 != null ) {
                    int reply = JOptionPane.showConfirmDialog(other,
                            "Duplicate Entry" + "\n" + "Cancel?", "Duplicate ID", JOptionPane.YES_NO_OPTION);
                    if (reply == JOptionPane.NO_OPTION) {
                        try {
                            ResultSet query = dbm.query("SELECT * FROM suppliers WHERE sup_id =" + item + "");
                            while (query.next()) {
                                Name = query.getString("sup_name");
                                //category = query.getString("cat_id");
                            }
                        } catch (SQLException ex) {
                            // System.out.println(ex.getMessage());
                        }

                        try {
                            ResultSet query = dbm.query("SELECT * FROM suppliers WHERE sup_id =" + item + "");
                            while (query.next()) {
                                category = query.getString("cat_id");
                            }
                        } catch (SQLException ex) {
                            // System.out.println(ex.getMessage());
                        }

                        if (!category_code.getSelectedItem().toString().equals(category)) {
                            JOptionPane.showMessageDialog(other, "Supplier Category Exception!" + "\n" + "Original root: " + category);

                        }

                        name.setText("" + Name);

                        no_of_sacks.requestFocusInWindow();

                        jLabel14.setText(" ");

                    }

                    if (reply == JOptionPane.YES_OPTION) {

                        supplier_id.getEditor().selectAll();
                        name.setText("");

                    }

                } else {
                    try {
                        ResultSet query = dbm.query("SELECT * FROM suppliers WHERE sup_id =" + item + "");
                        while (query.next()) {
                            Name = query.getString("sup_name");
                            //category = query.getString("cat_id");
                        }
                    } catch (SQLException ex) {
                        // System.out.println(ex.getMessage());
                    }

                    try {
                        ResultSet query = dbm.query("SELECT * FROM suppliers WHERE sup_id =" + item + "");
                        while (query.next()) {
                            category = query.getString("cat_id");
                        }
                    } catch (SQLException ex) {
                        // System.out.println(ex.getMessage());
                    }

                    if (!category_code.getSelectedItem().toString().equals(category)) {
                        JOptionPane.showMessageDialog(other, "Supplier Category Exception!" + "\n" + "Original root: " + category);

                    }

                    name.setText("" + Name);

                    no_of_sacks.requestFocusInWindow();

                    jLabel14.setText(" ");

                }

            } catch (Exception e) {

                // supplier_id.setSelectedIndex(0);
//System.out.println(e.getMessage());
            }
            // do something with object}
       }    }//GEN-LAST:event_supplier_idItemStateChanged

    private void category_codeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category_codeItemStateChanged
        if (category_code.getSelectedIndex() != 0) {
            try {
                category_name.setText(dbm.checknReturnStringData("category", "category_id", category_code.getSelectedItem().toString(), "category_name"));

            } catch (Exception e) {
                category_code.setSelectedIndex(1);
                category_code.setSelectedItem("");
                category_name.setText("");
            }

        }
        if (category_code.getSelectedItem().toString().equals("ST")||category_code.getSelectedItem().toString().equals("SELF") || category_code.getSelectedItem().toString().equals("SELF 11")) {
            self_transport.setSelected(true);
        }
        if (!category_code.getSelectedItem().toString().equals("ST") && !category_code.getSelectedItem().toString().equals("SELF") && !category_code.getSelectedItem().toString().equals("SELF 11")) {
            self_transport.setSelected(false);
        }
    }//GEN-LAST:event_category_codeItemStateChanged

    private void no_of_sacksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_no_of_sacksKeyReleased

    }//GEN-LAST:event_no_of_sacksKeyReleased

    private void no_of_sacksFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_no_of_sacksFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_no_of_sacksFocusLost

    private void total_kgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_total_kgFocusLost
        net_weight.setText("" + ((convertString(total_kg.getText())) - (convertString(sacks_weight.getText())) - (convertString(water.getText())) - (convertString(coarse_leaf.getText())) - (convertString(other.getText()))));

    }//GEN-LAST:event_total_kgFocusLost

    private void total_kgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_total_kgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_total_kgActionPerformed

    private void sacks_weightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sacks_weightFocusLost
        net_weight.setText("" + ((convertString(total_kg.getText())) - (convertString(sacks_weight.getText())) - (convertString(water.getText())) - (convertString(coarse_leaf.getText())) - (convertString(other.getText()))));
    }//GEN-LAST:event_sacks_weightFocusLost

    private void waterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_waterFocusLost
        net_weight.setText("" + ((convertString(total_kg.getText())) - (convertString(sacks_weight.getText())) - (convertString(water.getText())) - (convertString(coarse_leaf.getText())) - (convertString(other.getText()))));

    }//GEN-LAST:event_waterFocusLost

    private void coarse_leafFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_coarse_leafFocusLost
        net_weight.setText("" + ((convertString(total_kg.getText())) - (convertString(sacks_weight.getText())) - (convertString(water.getText())) - (convertString(coarse_leaf.getText())) - (convertString(other.getText()))));

    }//GEN-LAST:event_coarse_leafFocusLost

    private void otherFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_otherFocusLost
        net_weight.setText("" + ((convertString(total_kg.getText())) - (convertString(sacks_weight.getText())) - (convertString(water.getText())) - (convertString(coarse_leaf.getText())) - (convertString(other.getText()))));

    }//GEN-LAST:event_otherFocusLost

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        jButton1.setEnabled(true);

        if (supplier_id.getSelectedItem() == null) {
            jLabel14.setText("Please Choose Supplir ID");
        } else if (leaf_cat.getSelectedItem() == null) {
            jLabel15.setText("Please Choose Leaf Category");
        } else {
            double trans;
            String trans_code = dbm.checknReturnData("suppliers", "sup_id", supplier_id.getSelectedItem().toString(), "trans_rate");
            try {
                trans = Double.parseDouble(dbm.checknReturnStringData("tranport_rates", "Trans_id", trans_code, "Trans_rate"));
            } catch (Exception er) {
                trans = 0;
                JOptionPane.showMessageDialog(datechooser, "Transport code error");
            }

            if (self_transport.isSelected()) {
                trans = 0;
            }
            int i = 0;
            while (table.getValueAt(i, 0) != null) {
                i++;
            }
            if (i > 97) {
                JOptionPane.showMessageDialog(other, "Table length exceeded.Please Save And reEnter last entry!");

            } else {

                int j = 0;
                Boolean if_equal_return_1 = false;
                while (j < i) {
                    if (supplier_id.getSelectedItem().toString().equals(table.getValueAt(j, 0))) {
                        if_equal_return_1 = true;
                    }

                    j++;
                }

                if (if_equal_return_1) {

                    //JOptionPane.showConfirmDialog(category_code, "Duplicate Supplier code! Confirm?");
                    int reply = JOptionPane.showConfirmDialog(other,
                            "Duplicate Supplier ID" + "\n" + "Cancel?", "Duplicate ID", JOptionPane.YES_NO_OPTION);
                    if (reply == JOptionPane.NO_OPTION) {
                        table.setValueAt(supplier_id.getSelectedItem().toString(), i, 0);
                        table.setValueAt(leaf_cat.getSelectedItem().toString(), i, 9);
                        table.setValueAt(no_of_sacks.getText(), i, 1);
                        table.setValueAt(total_kg.getText(), i, 2);
                        table.setValueAt(sacks_weight.getText(), i, 3);
                        table.setValueAt(water.getText(), i, 4);
                        table.setValueAt(coarse_leaf.getText(), i, 5);
                        table.setValueAt(other.getText(), i, 6);
                        table.setValueAt(net_weight.getText(), i, 7);
                        total = total + Double.parseDouble(net_weight.getText());
                        table.setValueAt(trans, i, 8);

                    } else if (reply == JOptionPane.YES_OPTION) {

                    }

                } else {

                    table.setValueAt(supplier_id.getSelectedItem().toString(), i, 0);
                    table.setValueAt(leaf_cat.getSelectedItem().toString(), i, 9);
                    table.setValueAt(no_of_sacks.getText(), i, 1);
                    table.setValueAt(total_kg.getText(), i, 2);
                    table.setValueAt(sacks_weight.getText(), i, 3);
                    table.setValueAt(water.getText(), i, 4);
                    table.setValueAt(coarse_leaf.getText(), i, 5);
                    table.setValueAt(other.getText(), i, 6);
                    table.setValueAt(net_weight.getText(), i, 7);
                    total = total + Double.parseDouble(net_weight.getText());

                    table.setValueAt(trans, i, 8);

                }
            }
            category_code.requestFocusInWindow(); // request focus
            supplier_id.setSelectedItem(null);   // setting null
            leaf_cat.setSelectedItem("A"); // default///////////////////////////////////////////////////////////////////////////////////////////////
            no_of_sacks.setText(null);
            total_kg.setText(null);
            sacks_weight.setText(null);
            water.setText(null);
            coarse_leaf.setText(null);
            other.setText(null);
            net_weight.setText(null);

            // category_code.setEnabled(false);
            dayfield.setEnabled(false);
            monthfield.setEnabled(false);
            yearfield.setEnabled(false);
            datePicker1.setEnabled(false);
            name.setText(" ");

        }
        edit1.setText(total + "");

        //debit_amount.setText(null);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void supplier_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supplier_idKeyReleased


    }//GEN-LAST:event_supplier_idKeyReleased

    private void leaf_catItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leaf_catItemStateChanged
        no_of_sacks.requestFocusInWindow();
        jLabel15.setText(" ");
    }//GEN-LAST:event_leaf_catItemStateChanged

    private void total_kgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_total_kgKeyReleased

    }//GEN-LAST:event_total_kgKeyReleased

    private void sacks_weightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sacks_weightKeyReleased

    }//GEN-LAST:event_sacks_weightKeyReleased

    private void waterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_waterKeyReleased

    }//GEN-LAST:event_waterKeyReleased

    private void coarse_leafKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coarse_leafKeyReleased

    }//GEN-LAST:event_coarse_leafKeyReleased

    private void otherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_otherKeyReleased

    }//GEN-LAST:event_otherKeyReleased

    private void sendButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sendButtonFocusGained
        interface_events.Respond_enter(sendButton, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_sendButtonFocusGained

    private void no_of_sacksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_no_of_sacksKeyPressed
        interface_events.Change_focus_Enterkey_t(no_of_sacks, evt);
        interface_events.Change_focus_Enterkey_t(total_kg, evt);
    }//GEN-LAST:event_no_of_sacksKeyPressed

    private void total_kgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_total_kgKeyPressed
        interface_events.Change_focus_Enterkey_t(sacks_weight, evt);
    }//GEN-LAST:event_total_kgKeyPressed

    private void sacks_weightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sacks_weightKeyPressed
        interface_events.Change_focus_Enterkey_t(water, evt);
    }//GEN-LAST:event_sacks_weightKeyPressed

    private void waterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_waterKeyPressed
        interface_events.Change_focus_Enterkey_t(coarse_leaf, evt);
    }//GEN-LAST:event_waterKeyPressed

    private void coarse_leafKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coarse_leafKeyPressed
        interface_events.Change_focus_Enterkey_t(other, evt);
    }//GEN-LAST:event_coarse_leafKeyPressed

    private void otherKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_otherKeyPressed
        interface_events.Change_focus_Enterkey_t_b(other, sendButton, evt);
    }//GEN-LAST:event_otherKeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int i = 0;
        int j = 0;
        while (table.getValueAt(i, 0) != null) {

            j = 0;
            while (j < 10) {

                table.setValueAt(null, i, j);
                j++;
            }
            i++;
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int i = 0;
        int j = 0;
        while (table.getValueAt(i, 0) != null) {
            i++;
        }
        i--;
        while (j < 10) {
            table.setValueAt(null, i, j);
            j++;

        }


    }//GEN-LAST:event_jButton7ActionPerformed

    private void monthfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthfieldKeyPressed
        if (monthfield.getText().equals("Jan")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Dec");
                int yr = Integer.parseInt(yearfield.getText());

                yearfield.setText("" + (yr - 1));
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Feb");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Feb")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jan");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Mar");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Mar")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Feb");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();
            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Apr");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Apr")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Mar");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();
            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("May");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("May")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Apr");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                monthfield.setText("Jun");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Jun")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("May");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Jul");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Jul")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jun");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Aug");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Aug")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Jul");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Sep");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Sep")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Aug");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Oct");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Oct")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Sep");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Nov");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Nov")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Oct");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Dec");
                monthfield.selectAll();
            }

        } else if (monthfield.getText().equals("Dec")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                monthfield.setText("Nov");
                int yr = Integer.parseInt(yearfield.getText());
                monthfield.selectAll();

            }
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                monthfield.setText("Jan");
                int yr = Integer.parseInt(yearfield.getText());

                yearfield.setText("" + (yr + 1));
                monthfield.selectAll();
            }

        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            dayfield.requestFocus();
            dayfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            yearfield.requestFocus();
            yearfield.selectAll();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            category_code.requestFocus();

        }
        update.update_month_check(jButton1, yearfield, monthfield);
        update.update_month_check(jButton2, yearfield, monthfield);
    }//GEN-LAST:event_monthfieldKeyPressed

    private void yearfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearfieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            yearfield.setText("" + (Integer.parseInt(yearfield.getText()) + 1));
            yearfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            yearfield.setText("" + (Integer.parseInt(yearfield.getText()) - 1));
            yearfield.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            monthfield.requestFocus();
            monthfield.selectAll();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            category_code.requestFocus();

        }
        update.update_month_check(jButton1, yearfield, monthfield);
        update.update_month_check(jButton2, yearfield, monthfield);


    }//GEN-LAST:event_yearfieldKeyPressed

    private void dayfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayfieldKeyPressed
        ///////////////////////////////////////////////////  Days Decrement/////////////////////////////////////////////////////////////////////////////

        if (dayfield.getText().equals("1")) {           // Jumping to 31 and 30 from 1st
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

                if (monthfield.getText().equals("Feb") || monthfield.getText().equals("Apr") || monthfield.getText().equals("Jun") || monthfield.getText().equals("Aug") || monthfield.getText().equals("Sep") || monthfield.getText().equals("Nov") || monthfield.getText().equals("Feb")) {
                    dayfield.setText("31");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("May") || monthfield.getText().equals("Jul") || monthfield.getText().equals("Oct") || monthfield.getText().equals("Dec")) {
                    dayfield.setText("30");
                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("Mar")) {     // from march 1st jump to 28th or 29th checking leap years
                    int yr = Integer.parseInt(yearfield.getText());
                    if (yr % 4 == 0) {
                        if (yr % 100 == 0) {
                            if (yr % 400 == 0) {
                                dayfield.setText("29"); // Leap Year
                            }
                        }
                        if (yr % 100 == 0) {
                            if (yr % 400 != 0) {
                                dayfield.setText("28"); // not a leap year
                            }
                        }
                        dayfield.setText("29");       // leap year

                    }
                    if (yr % 4 != 0) {
                        dayfield.setText("28");       // not a leap year
                    }
                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth - 1));

                } else if (monthfield.getText().equals("Jan")) {            // From jan 1st jump to december 31st decrementing year
                    dayfield.setText("31");

                    int yr = Integer.parseInt(yearfield.getText());
                    monthfield.setText("Dec");
                    yearfield.setText("" + (yr - 1));    // year
                }
                dayfield.selectAll();
            }                                           // /// decrementing normal values
        } else if (dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) - 1));
                dayfield.selectAll();
            }
        }
        /////////////////////////////////////////////////  Days Increment///////////////////////////////////////////////////////////////////////////////////////////////////
        if (dayfield.getText().equals("30")) {               // from 30th to 1st of next month
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                if (monthfield.getText().equals("Apr") || monthfield.getText().equals("Jun") || monthfield.getText().equals("Sep") || monthfield.getText().equals("Nov")) {
                    dayfield.setText("0");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));

                }
                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));
                dayfield.selectAll();
            }

        } else if (dayfield.getText().equals("31")) {            // from 31st to 1st of next month
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                if (monthfield.getText().equals("Jan") || monthfield.getText().equals("Mar") || monthfield.getText().equals("May") || monthfield.getText().equals("Jul") || monthfield.getText().equals("Aug") || monthfield.getText().equals("Oct")) {
                    dayfield.setText("1");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));

                } else if (monthfield.getText().equals("Dec")) {      // December to january incrementing the year

                    dayfield.setText("1");

                    int yr = Integer.parseInt(yearfield.getText());
                    monthfield.setText("Jan");
                    yearfield.setText("" + (yr + 1));
                }
                dayfield.selectAll();
            }

        } else if (monthfield.getText().equals("Feb")) {                    // for february
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                if (dayfield.getText().equals("28")) {                    // at 28 check for leap year
                    int yr = Integer.parseInt(yearfield.getText());
                    if (yr % 4 == 0) {
                        if (yr % 100 == 0) {
                            if (yr % 400 == 0) {
                                dayfield.setText("29"); // Leap Year       // increment to 29
                            }
                        }
                        if (yr % 100 == 0) {
                            if (yr % 400 != 0) {
                                dayfield.setText("1");
                                int mnth = datechooser.return_index(monthfield.getText());
                                monthfield.setText(datechooser.Return_month(mnth + 1));

                                // not a leap year                             // jump to next month
                            }
                        }
                        dayfield.setText("29");       // leap year             // increment to 29th

                    }
                    if (yr % 4 != 0) {
                        dayfield.setText("1");
                        int mnth = datechooser.return_index(monthfield.getText());
                        monthfield.setText(datechooser.Return_month(mnth + 1));                  // not a leap year
                    }

                } else if (dayfield.getText().equals("29")) {              // at 29 jump to next month normally
                    dayfield.setText("1");

                    int mnth = datechooser.return_index(monthfield.getText());
                    monthfield.setText(datechooser.Return_month(mnth + 1));
                    // incrementing normal values/////////////////////// for february separately
                } else if (dayfield.getText().equals("1") || dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                        || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                        || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                        || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                        || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                        || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                        || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {

                    dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));

                }
                dayfield.selectAll();
            }
            // incrementing normal values
        } else if (dayfield.getText().equals("1") || dayfield.getText().equals("2") || dayfield.getText().equals("3") || dayfield.getText().equals("4") || dayfield.getText().equals("5")
                || dayfield.getText().equals("6") || dayfield.getText().equals("7") || dayfield.getText().equals("8") || dayfield.getText().equals("9")
                || dayfield.getText().equals("10") || dayfield.getText().equals("11") || dayfield.getText().equals("12") || dayfield.getText().equals("13") || dayfield.getText().equals("14")
                || dayfield.getText().equals("15") || dayfield.getText().equals("16") || dayfield.getText().equals("17") || dayfield.getText().equals("18")
                || dayfield.getText().equals("19") || dayfield.getText().equals("20") || dayfield.getText().equals("21") || dayfield.getText().equals("22")
                || dayfield.getText().equals("23") || dayfield.getText().equals("24") || dayfield.getText().equals("25") || dayfield.getText().equals("26")
                || dayfield.getText().equals("27") || dayfield.getText().equals("28") || dayfield.getText().equals("29") || dayfield.getText().equals("30") || dayfield.getText().equals("31")) {
            if (evt.getKeyCode() == KeyEvent.VK_UP) {

                dayfield.setText("" + (Integer.parseInt(dayfield.getText()) + 1));
                dayfield.selectAll();

            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            monthfield.requestFocus();
            monthfield.selectAll();
        }

        update.update_month_check(jButton1, yearfield, monthfield);
        update.update_month_check(jButton2, yearfield, monthfield);
    }//GEN-LAST:event_dayfieldKeyPressed

    private void datePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePicker1ActionPerformed
        java.sql.Date datef = new java.sql.Date(datePicker1.getDate().getTime());

        dayfield.setText(Integer.parseInt(datehandler.get_day(datef)) + "");
        monthfield.setText(datehandler.get_month(datef));
        yearfield.setText(datehandler.get_year(datef));
        category_code.requestFocus();
        update.update_month_check(jButton1, yearfield, monthfield);
        update.update_month_check(jButton2, yearfield, monthfield);
    }//GEN-LAST:event_datePicker1ActionPerformed

    private void category_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_codeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_category_codeActionPerformed

    private void category_codeCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_category_codeCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_category_codeCaretPositionChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            globject.setCategoryCode(category_code.getSelectedItem().toString());

            globject.setDate(datechooser.Return_date(yearfield, monthfield, dayfield));
            double trans = Double.parseDouble(dbm.checknReturnStringData("category", "category_id", category_code.getSelectedItem().toString(), "extra_rate"));
            //  System.out.println(trans);
            int i = 0;
            // boolean st;

            while (table.getValueAt(i, 0) != null) {
                globject.setSupplierCode(Integer.parseInt((String) table.getValueAt(i, 0)));
                globject.setLeafCategory((String) table.getValueAt(i, 9));
                globject.setNoOfSacks(Integer.parseInt((String) table.getValueAt(i, 1)));
                globject.setTotalWeight(convertString((String) table.getValueAt(i, 2)));
                globject.setSacksWeight(convertString((String) table.getValueAt(i, 3)));
                globject.setWater(convertString((String) table.getValueAt(i, 4)));
                globject.setCoarseLeaf(convertString((String) table.getValueAt(i, 5)));
                globject.setOther(convertString((String) table.getValueAt(i, 6)));
                globject.setNetQuantity(convertString((String) table.getValueAt(i, 7)));
                /*  if ("Yes".equals((String) table.getValueAt(i, 8))) {
                 st = true;
                 } else {
                 st = false;
                 }*/
                globject.setSelfTransport(trans);
                globject.setTransactionId(Integer.parseInt(edit.getText()));
                globject.editDataBase();

                System.out.println("updated");

                int k = 0;
                int j = 0;
                while (table.getValueAt(k, 0) != null) {

                    j = 0;
                    while (j < 10) {

                        table.setValueAt(null, k, j);
                        j++;
                    }
                    k++;
                }
                category_code.setEnabled(true);
                dayfield.setEnabled(false);
                monthfield.setEnabled(false);
                yearfield.setEnabled(false);
                datePicker1.setEnabled(false);
                category_name.setText(" ");

                category_code.setSelectedIndex(0);
                category_code.requestFocusInWindow();
                // Logger.getLogger(GLmanual_entry.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (Exception ex) {
            Logger.getLogger(GLmanual_entry.class.getName()).log(Level.SEVERE, null, ex);
        }
        category_code.requestFocusInWindow();
        // Logger.getLogger(GLmanual_entry.class.getName()).log(Level.SEVERE, null, ex);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void editKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            try {

                int tr_no = 0;

                if (!edit.getText().equals("")) {
                    tr_no = Integer.parseInt(edit.getText());
                }
                supplier_id.setSelectedItem(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "sup_id"));
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "sup_id"), 0, 0);
                String date = dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "tr_date");
                category_code.setSelectedItem(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "category_code"));
                java.sql.Date Datef = null;
                Datef = java.sql.Date.valueOf(date);

                datePicker1.setDate(Datef);
                //table.setValueAt(1, 0, 0);
                leaf_cat.setSelectedItem(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "leaf_category"));
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "leaf_category"), 0, 9);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "no_of_sacks"), 0, 1);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "total_kg"), 0, 2);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "sack_kg"), 0, 3);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "water_kg"), 0, 4);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "coarse_leaf_kg"), 0, 5);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "other"), 0, 6);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "net_qty"), 0, 7);
                table.setValueAt(dbm.checknReturnData("green_leaf_transactions", "tr_id", tr_no, "transport"), 0, 8);
                jButton1.setEnabled(false);
            } catch (PropertyVetoException ex) {
                JOptionPane.showMessageDialog(datechooser, ex.getMessage());
            }
            delete.setEnabled(true);
        }
        update.update_month_check(jButton1, yearfield, monthfield);
        update.update_month_check(jButton2, yearfield, monthfield);
        jButton1.setEnabled(false);
    }//GEN-LAST:event_editKeyPressed


    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int reply = JOptionPane.showConfirmDialog(other,
                "Are you Sure?" + "\n" + "Delete entry " + edit.getText() + "?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.NO_OPTION) {
        }
        if (reply == JOptionPane.YES_OPTION) {

            dbm.CheckNDeleteFromDataBase("green_leaf_transactions", "tr_id", Integer.parseInt(edit.getText()));

            int k = 0;
            int j = 0;
            while (table.getValueAt(k, 0) != null) {

                j = 0;
                while (j < 10) {

                    table.setValueAt(null, k, j);
                    j++;
                }
                k++;
            }
            supplier_id.setSelectedIndex(0);
            leaf_cat.setSelectedItem("A");
            category_name.setText(" ");

            category_code.setSelectedIndex(0);
            edit.setText(null);
            category_code.requestFocusInWindow();
            JOptionPane.showMessageDialog(datechooser, "Deleted");

        }

    }//GEN-LAST:event_deleteActionPerformed

    private void dayfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayfieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  ////// ChaNGE  focus on enter////////////////
            category_code.requestFocus();

        }
    }//GEN-LAST:event_dayfieldKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            GL_Billsummery bill = new GL_Billsummery(supplier_id.getSelectedItem().toString());
            bill.setVisible(true);
        } catch (Exception e) {
            GL_Billsummery bill = new GL_Billsummery("SupID");
            bill.setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void edit1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edit1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_edit1KeyPressed

    private void category_codeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_category_codeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            supplier_id.requestFocus();

        }

        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            category_code.showPopup();

        }

        if (evt.getKeyCode() == 127) {
            jButton1.requestFocus();

        }


    }//GEN-LAST:event_category_codeKeyPressed

    private void jButton1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton1FocusGained
        interface_events.Respond_enter(jButton1, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1FocusGained
    public double convertString(String s) {
        if (s.length() == 0) {
            return 0;
        } else {
            return Double.parseDouble(s);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox category_code;
    private javax.swing.JLabel category_name;
    private javax.swing.JTextField coarse_leaf;
    private com.michaelbaranov.microba.calendar.DatePicker datePicker1;
    private javax.swing.JPanel datepanel;
    private javax.swing.JTextField dayfield;
    private javax.swing.JButton delete;
    private javax.swing.JTextField edit;
    private javax.swing.JTextField edit1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JComboBox leaf_cat;
    private javax.swing.JTextField monthfield;
    private javax.swing.JLabel name;
    private javax.swing.JTextField net_weight;
    private javax.swing.JTextField no_of_sacks;
    private javax.swing.JTextField other;
    private javax.swing.JTextField sacks_weight;
    private javax.swing.JCheckBox self_transport;
    private javax.swing.JButton sendButton;
    private javax.swing.JComboBox supplier_id;
    private javax.swing.JTable table;
    private javax.swing.JTextField total_kg;
    private javax.swing.JTextField water;
    private javax.swing.JTextField yearfield;
    // End of variables declaration//GEN-END:variables
}
